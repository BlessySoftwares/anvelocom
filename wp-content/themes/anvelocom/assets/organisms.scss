/* Groups of molecules (and possibly atoms) joined together to form distinct section of an interface.
*/


/* Displays a product thumb in different ways
  - thumb structure is:
  - <header> with <h3> title
  - <figure>
  - <aside> with details
*/
@mixin thumb($header: false, $figure: true, $aside: false) {
  header, figure, aside {
    display: none;
  }
  
  @if ($header == true) {
    header {
      display: block;
    }
  }
  
  @if ($figure == true) {
    figure {
      display: block;
    }
  }
  
  @if ($aside == true) {
    aside {
      display: block;
    }
  }
}


/* Displaying product / article thumbs
  - if thumbs are filtered by Isotope the standard grid is replaced by an isotope grid
*/
@mixin thumbs($type: normal, $margin-bottom: 0) {
  article {
    &.thumb {
      @if ($type == normal) {
        @include col(5);
      } @elseif ($type == isotope) {
        @include isotope(5);
      }
    }
    
    @include thumb;
    margin-bottom: $margin-bottom;
  }
}


/* Columns for Isotope
  - since Isotope filters out elements we don't know which element will be the last in a row,
  so we can't make it's righ margin 0
  - in this grid all elements in a row will have the same right margin
*/
@mixin isotope($how-many, $maximum : 10) {
  $modulo: 100 % $how-many;
  $divident: 100 / $how-many;
  
  @if ($modulo == 0) {
    /* The margin will be the 10% of the column width
      - in a 5 column grid we would have width=18%, margin=2%
      - since isotope cannot handle this 100% full row (?) we will have to reduce column with with 1% to 17%
    */
    $gutter: $divident / 10;
    $column-width: $divident - $gutter - 1;
    @include m_column(percentage($column-width/100), percentage($gutter/100));
  } @else {
    $gutter: $modulo;
    $column-width: $divident - $gutter;
  }
}

/* Columns for the grid
  - calculates automatically the columns size and margin
  - the right margin of the last element in a row is set to zero
  - $maximum sets how many articles will be displayed on a single page 
*/
@mixin col($how-many, $maximum : 10) {
  $column-width: 90% / $how-many;
  $gutter: 10% / ($how-many - 1);
  
  @include m_column($column-width, $gutter);
  
  @for $i from 2 through $maximum {
    @if (($i % $how-many) == 0) {
      &:nth-of-type(#{$i}) {
         margin-right: 0;
      }
    }
  }
}

/* Returns the with of a column in a grid
  - This is useful to resize other elements to the grid
  - The formula is taken and must be in sync with the mixin col
*/
@function col-width($how-many) {
  @return 90% / $how-many;
}

@function isotope-col-width($how-many) {
  $modulo: 100 % $how-many;
  $divident: 100 / $how-many;
  
  @if ($modulo == 0) {
    /* The margin will be the 10% of the column width
      - in a 5 column grid we would have width=18%, margin=2%
      - since isotope cannot handle this 100% full row (?) we will have to reduce column with with 1% to 17%
    */
    $gutter: $divident / 10;
    $column-width: $divident - $gutter - 1;
    @return percentage($column-width/100);
  } @else {
    $gutter: $modulo;
    $column-width: $divident - $gutter;
    @return percentage($column-width/100);
  }
}

/* When decorations and padding is added to a column in a grid these must be removed from the original column width
  - params can be any of %, em, px
*/
@function col-resize($width: 100%, $padding: 0, $border: 0) {
  @return calc(#{$width} - #{$padding} - #{$border});
}


/* Float left child elements like in inline lists
  - it selects only the direct descendants of the parent element
  - its a free-form grid
*/
@mixin float-left {
  @include block;
  
  > * {
    width: auto;
    float: left;
    margin-right: $pad;
  }
}



/* Highlight current menu item
*/
@mixin highlight-menu($index) {
  #header nav ul li:nth-of-type(#{$index}) a {
    @include color(highlight);
  }
}


/* A classic, horizontal menu for <nav> elements
*/
@mixin menu {
  h3 {
    display: none;
  }
  
  ul {
    @include list-inline;
  }
}


/* A classic, centered container
  - adapts to small screens 
*/
@mixin container {
  @include m_container($container-mobile);
  
  @include large-screen-and-above {
    @include m_container($container-desktop);
  }
}




/* Default font, color, typography settings for non text elements
*/
@mixin default-settings {
  @include color;
  @include font;
  
  a {
    @include link;
  }
  
  img {
    @include fluid-image;
  }
}



/* Vertical spacing of all typographic elements
*/
@mixin vertical-rhythm {
  /* Padding of individual elements
  */
  ul, ol, dl, table, figure, form, q {
    margin: $pad 0;
  }
  
  figure {
    margin-top: $pad*2;
  }
  
  
  /* Padding of consecutive elements
  */
  dd + dt {
    margin-top: $pad;
  }
  
  p + p {
    margin-top: $pad;
  }
  
  h1 + h2, h2 + h3 {
    padding-top: 0;
  }
  
  
  h1 + ul, h2 + ul, h3 + ul,
  h1 + ol, h2 + ol, h3 + ol {
    margin-top: 0;
  }
  
  
  li ul, li ol {
    margin-top: 0;
  }
  
}


/* Settings for long text content like articles, blog posts
*/
@mixin body-text {
  max-width: $body-text-width; 
  @include line-height(text);
  
  /* Headings
  */
  @include headings;
  h1, h2, h3 {
    @include line-height(headings);
    margin-top: 0;
    margin-bottom: 0;
    padding: $h1-padding 0; 
  }
  
  /* Elements
  */
  em, i {
    font-style: italic;
  }
  
  strong, b {
    font-weight: bold;
  }
  
  @include ul;
  @include ol;
  @include dl;
  @include table;
  @include figure;
  @include form;
  @include q;
  
  @include vertical-rhythm;
}
